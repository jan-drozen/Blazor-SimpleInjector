@page "/fetchdata"
@page "/fetchdata/{TestParamValue}"
@inherits BaseComponent

@using BlazorSimpleInjectorMediator.Data
@using SimpleInjector;
@using System.Diagnostics;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button type="button" @onclick="Test">Test</button>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Dependency]
    public WeatherForecastService ForecastService { get; set; }

    [Dependency]
    public IScopedCaller ScopedCaller { get; set; }

    [Dependency]
    public Container Container { get; set; }

    [Dependency]
    NavigationManagerWrapper Navigation { get; set; }
    private WeatherForecast[]? forecasts;

    [Parameter]
    public string TestParamValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        WriteScopesToDebug("FetchData OnInitializedAsync");
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

    private void Test()
    {
        WriteScopesToDebug("Test() button click handler");
        var value = "TEST";
        Navigation.NavigationManager.NavigateTo($"/fetchdata/{value}");
    }

    protected override async Task OnParametersSetAsync()
    {
        WriteScopesToDebug("FetchData OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    private void WriteScopesToDebug(string header)
    {
        Debug.WriteLine(header);
        var cscope = SimpleInjector.Lifestyles.AsyncScopedLifestyle.Scoped.GetCurrentScope(Container);
        Debug.WriteLine($"GetCurrentScope: {cscope!.GetHashCode()}");
        Debug.WriteLine($"Applier Scope: {base.Applier.accessor.Scope!.GetHashCode()}");
    }
}
